{"version":3,"sources":["context.js","TodoItem.js","TodoList.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","title","id","completed","dispatch","useContext","cls","push","className","join","type","checked","onChange","payload","onClick","TodoList","todos","map","item","key","initialState","state","action","Date","now","todo","filter","App","useReducer","reducer","JSON","parse","localStorage","getItem","useState","todoTitle","setTodoTitle","useEffect","setItem","stringify","Provider","value","ev","target","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMAEaA,EAAUC,IAAMC,gBCCd,SAASC,EAAT,GAA6C,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,UAEpCC,EAAaC,qBAAWR,GAAxBO,SAEFE,EAAM,CAAC,QAMb,OAJIH,GACFG,EAAIC,KAAK,aAIT,yBAAKC,UAAWF,EAAIG,KAAK,MACvB,+BACE,2BACEC,KAAK,WACLC,QAASR,EACTS,SAAU,kBAAMR,EAAS,CACvBM,KAAM,SACNG,QAASX,OAIb,8BAAOD,GAEP,uBACEa,QAAS,kBAAMV,EAAS,CACtBM,KAAM,SACNG,QAASX,MAHb,YCxBO,SAASa,EAAT,GAA4B,IAATC,EAAQ,EAARA,MAChC,OACE,4BACGA,EAAMC,KAAI,SAAAC,GAAI,OAAI,kBAAClB,EAAD,eAAUmB,IAAKD,EAAKhB,IAAQgB,Q,WCNxCE,EAAe,CACxB,CAAElB,GAAI,EAAGD,MAAO,4GAAwBE,WAAW,GACnD,CAAED,GAAI,EAAGD,MAAO,gHAAuBE,WAAW,GAClD,CAAED,GAAI,EAAGD,MAAO,sGAAuBE,WAAW,IAGvC,WAAUkB,EAAOC,GAC5B,OAAQA,EAAOZ,MACX,IAAK,MACD,MAAM,GAAN,mBACOW,GADP,CAEI,CACInB,GAAIqB,KAAKC,MACTvB,MAAOqB,EAAOT,QACdV,WAAW,KAIvB,IAAK,SACD,OAAOkB,EAAMJ,KAAI,SAAAQ,GAIb,OAHIA,EAAKvB,KAAOoB,EAAOT,UACnBY,EAAKtB,WAAasB,EAAKtB,WAEpBsB,KAGf,IAAK,SACD,OAAOJ,EAAMK,QAAO,SAAAD,GAAI,OAAIA,EAAKvB,KAAOoB,EAAOT,WAEnD,QACI,OAAOQ,ICxBJ,SAASM,IAAO,IAAD,EAEFC,qBAAWC,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,WAAab,GAF/D,mBAErBC,EAFqB,KAEdjB,EAFc,OAGM8B,mBAAS,IAHf,mBAGrBC,EAHqB,KAGVC,EAHU,KAK5BC,qBAAU,WACRL,aAAaM,QAAQ,QAASR,KAAKS,UAAUlB,MAC5C,CAACA,IAYJ,OACE,kBAACxB,EAAQ2C,SAAT,CAAkBC,MAAO,CAAErC,aACzB,yBAAKI,UAAU,aACb,mGAEA,yBAAKA,UAAU,eACb,2BAAOE,KAAK,OAAO+B,MAAON,EAAWvB,SAAU,SAAA8B,GAAE,OAAIN,EAAaM,EAAGC,OAAOF,QAAQG,WAhB5E,SAAAF,GACC,UAAXA,EAAGvB,MACLf,EAAS,CACPM,KAAM,MACNG,QAASsB,IAEXC,EAAa,QAWT,yHAGF,kBAACrB,EAAD,CAAUC,MAAOK,M,MCvBLwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAACxB,EAAD,MAASyB,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5f1abe6a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Context = React.createContext()","import React, { useContext } from 'react'\nimport { Context } from './context'\n\nexport default function TodoItem({ title, id, completed }) {\n\n  const { dispatch } = useContext(Context)\n\n  const cls = ['todo']\n\n  if (completed) {\n    cls.push('completed')\n  }\n\n  return (\n    <div className={cls.join(' ')}>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          onChange={() => dispatch({\n            type: 'toggle',\n            payload: id\n          })}\n        />\n        \n        <span>{title}</span>\n\n        <i\n          onClick={() => dispatch({\n            type: 'remove',\n            payload: id\n          })}\n        >\n          ✖\n        </i>\n      </label>\n    </div>\n  )\n}","import React from 'react'\nimport TodoItem from './TodoItem'\n\nexport default function TodoList({todos}) {\n  return (\n    <ul>\n      {todos.map(item => <TodoItem key={item.id} {...item} />)}\n    </ul>\n  )\n}","export const initialState = [\r\n    { id: 1, title: \"Купить хлеб и молоко\", completed: true },\r\n    { id: 2, title: \"Оплатить коммуналку\", completed: false },\r\n    { id: 3, title: \"Забрать долг у Васи\", completed: false },\r\n]\r\n\r\nexport default function (state, action) {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: Date.now(),\r\n                    title: action.payload,\r\n                    completed: false\r\n                }\r\n            ]\r\n\r\n        case 'toggle':\r\n            return state.map(todo => {\r\n                if (todo.id === action.payload) {\r\n                    todo.completed = !todo.completed\r\n                }\r\n                return todo\r\n            })\r\n\r\n        case 'remove':\r\n            return state.filter(todo => todo.id !== action.payload)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { useState, useEffect, useReducer } from 'react'\nimport TodoList from './TodoList'\nimport { Context } from './context'\nimport reducer, { initialState } from './reducer'\n\n\nexport default function App() {\n\n  const [state, dispatch] = useReducer(reducer, JSON.parse(localStorage.getItem('todos')) || initialState)\n  const [todoTitle, setTodoTitle] = useState('')\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(state))\n  }, [state])\n\n  const addTodo = ev => {\n    if (ev.key === 'Enter') {\n      dispatch({\n        type: 'add',\n        payload: todoTitle\n      })\n      setTodoTitle('')\n    }\n  }\n\n  return (\n    <Context.Provider value={{ dispatch }} >\n      <div className=\"container\">\n        <h4>Список задач</h4>\n\n        <div className=\"input-field\">\n          <input type=\"text\" value={todoTitle} onChange={ev => setTodoTitle(ev.target.value)} onKeyPress={addTodo} />\n          <label>Введите задание</label>\n        </div>\n\n        <TodoList todos={state} />\n      </div>\n    </Context.Provider>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}